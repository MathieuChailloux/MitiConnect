# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ErcTvbPluginDialog
                                 A QGIS plugin
 ERC-TVB integrates ecological continuities in Avoid, Minimize, Mitigate sequence
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-08-25
        git sha              : $Format:%H$
        copyright            : (C) 2021 by INRAE
        email                : mathieu.chailloux@inrae.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic, QtWidgets
from qgis.PyQt.QtCore import Qt

from ..qgis_lib_mc.utils import CustomException
from ..qgis_lib_mc.abstract_model import DictItem, DictModel, TableToDialogConnector
from ..ui.scenario_dialog import ScenarioDialogItem, ScenarioDialog


class ScenarioItem(DictItem):

    NAME = 'NAME'
    BASE = 'BASE'
    STATUS_OS = 'OS'
    STATUS_FRICTION = 'FRICTION'
    STATUS_GRAPH = 'GRAPH'
    FIELDS = [ NAME, BASE, STATUS_OS, STATUS_FRICTION, STATUS_GRAPH ]
    
    def __init__(self, dlg_item, parent=None, feedback=None):
        dict = self.getDictFromDlgItem(dlg_item)
        super().__init__(self,dict,fields=self.FIELDS,feedback=feedback)
        self.dlg_item = dlg_item
        
    def getDictFromDlgItem(self,dlg_item):
        statusChanged = dlg_item.dict != self.dlg_item.dict
        dict = { NAME : dlg_item.NAME,
            BASE : dlg_item.BASE,
            STATUS_OS : not statusChanged,
            STATUS_FRICTION : not statusChanged,
            STATUS_GRAPH : not statusChanged }
        return dict
        
    def updateFromDlgItem(self,dlg_item):
        dict = self.getDictFromDlgItem(dlg_item)
        self.dict = dict
        
class ScenarioModel(DictModel):

    

    def __init__(self, parentModel):
        super().__init__(self,ScenarioItem.FIELDS,feedback=parentModel.feedback)
        self.parentModel = parentModel
        
    def getScenarioNames(self):
        return [i.getName() for i in self.items]
    def getItemFromName(self,name):
        for i in self.items:
            if i.getName() == name:
                return i
        return None
                        
    # Returns absolute path of 'item' output layer
    # def getItemOutBase(self,item):
        # out_bname = item.getName() + ".tif"
        # out_dir = self.parentModel.getScenarioDir()
        # return os.path.join(out_dir,out_bname)
        
        
    def flags(self, index):
        return Qt.ItemIsSelectable | Qt.ItemIsEnabled


class ScenarioConnector(TableToDialogConnector):

    def __init__(self,dlg,model):
        self.dlg = dlg
        self.feedback = dlg.feedback
        super().__init__(model,self.dlg.scenarioView,
                         addButton=self.dlg.scenarioAdd,
                         removeButton=self.dlg.scenarioRemove)

    def connectComponents(self):
        super().connectComponents()
        self.dlg.scenarioUp.clicked.connect(self.upgradeItem)
        self.dlg.scenarioDown.clicked.connect(self.downgradeItem)
    
    def openDialog(self,item): 
        self.feedback.pushDebugInfo("item = " + str(item))
        # dlg_item = item.dlg_item if item else None
        scenarioNames = self.model.getScenarioNames()
        scenario_dlg = ScenarioDialog(self.dlg,item,scenarioNames,feedback=self.feedback)
        return scenario_dlg 
    
    def updateFromDlgItem(self,item,dlg_item):
        item.updateFromDlgItem(dlg_item)
    def mkItemFromDlgItem(self,dlg_item): 
        return ScenarioItem(dlg_item,feedback=self.feedback)
     

        
