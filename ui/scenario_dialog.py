# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ErcTvbPluginDialog
                                 A QGIS plugin
 ERC-TVB integrates ecological continuities in Avoid, Minimize, Mitigate sequence
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-08-25
        git sha              : $Format:%H$
        copyright            : (C) 2021 by INRAE
        email                : mathieu.chailloux@inrae.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os, sys

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from ..qgis_lib_mc import abstract_model, qgsUtils, feedbacks

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
SC_DIALOG, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'scenario_dialog.ui'))
SC_LANDUSE_DIALOG, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'scenario_landuse_dialog.ui'))

class ScenarioReclassItem(abstract_model.DictItem):

    VAL = 'VAL'
    CLASS = 'CLASS'
    FIELDS = [ VAL, CLASS ]
    
    def __init__(self, name, reclass=None):
        dict = { NAME : name, reclass : reclass }
        super().__init__(dict, FIELDS)
        
class ScenarioReclassModel(abstract_model.DictModel):

    def __init__(self,values=[]):
        itemClass = getattr(sys.modules[__name__], ScenarioReclassItem.__name__)
        super().__init__(self,itemClass)
        self.loadValues(values)
            
    def loadValues(self,values):
        self.items=[]
        for v in values:
            i = ScenarioReclassItem(v)
            self.addItem(i)
        self.layoutChanged.emit()
        

class ScenarioDialogItem(abstract_model.DictItem):
    
    NAME = 'NAME'
    BASE = 'BASE'
    LAYER = 'LAYER'
    # True = Field mode, False = Fixed mode
    RECLASS_MODE = 'RECLASS_MODE'
    RECLASS_FIELD = 'RECLASS_FIELD'
    RECLASS_VAL = 'RECLASS_VAL'
    # DISPLAY_FIELDS = ['NAME','BASE']
    FIELDS = ['NAME','BASE','LAYER','RECLASS_MODE','RECLASS_VAL']
    
    def __init__(self, name, base, layer, reclassMode=False,
            reclassField=None, reclassVal=0):
        dict = { self.NAME : name, self.BASE : base, self.LAYER : layer,
            self.RECLASS_MODE : reclassMode, self.RECLASS_FIELD : reclassField, 
            self.RECLASS_VAL : reclassVal }
        super().__init__(dict, self.FIELDS)
        
    def getName(self):
        return self.dict[self.NAME]
    def getBase(self):
        return self.dict[self.BASE]
    def getLayer(self):
        return self.dict[self.LAYER]
    
    

class ScenarioDialog(QtWidgets.QDialog, SC_DIALOG):
    def __init__(self, parent, dlgItem, scenarioList, feedback=None):
        """Constructor."""
        super(ScenarioDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.model = dlgItem.reclassModel if dlgItem else ScenarioReclassModel()
        self.scenarioList = scenarioList
        self.setupUi(self)
        self.updateUi(dlgItem)
        self.connectComponents()
        
    def connectComponents(self):
        self.scLayer.layerChanged.connect(self.changeLayer)
        self.scFieldMode.clicked.connect(self.switchFieldMode)
        self.scFixedMode.clicked.connect(self.switchFixedMode)
        self.scField.fieldChanged.connect(self.changeField)
        self.scDialogView.setModel(self.model)
        
    def switchBurnMode(self,fieldMode):
        self.scField.setEnabled(fieldMode)
        self.scDialogView.setEnabled(fieldMode)
        self.scBurnVal.setEnabled(not fieldMode)
    def switchFieldMode(self):
        self.switchBurnMode(self,True)
    def switchFixedMode(self):
        self.switchBurnMode(self,False)
        
    def changeLayer(self,layer):
        self.scField.setLayer(layer)
        self.layer = layer
    def changeField(self,fieldname):
        values = qgsUtils.getLayerFieldUniqueValues(self.layer,fieldname)
        self.model.loadValues(values)
        
    def errorDialog(self,msg):
        feedbacks.launchDialog(None,self.tr('Wrong parameter value'),msg)
        
    def showDialog(self):
        while self.exec_():
            name = self.scName.text()
            if not name:
                self.errorDialog(self.tr("Empty name"))
                continue
            base = self.scBase.currentIndex()
            if not base:
                self.errorDialog(self.tr("Empty base scenario"))
                continue
            layer = self.scLayer.currentLayer()
            if not layer:
                self.errorDialog(self.tr("Empty layer"))
                continue
            layerPath = qgsUtils.pathOfLayer(layer)
            shortMode = self.scShort.isChecked()
            scPerValueMode = self.scPerValue.isChecked()
            burnFieldMode = self.scFieldMode.isChecked()
            reclassField = self.scField.currentField()
            if burnFieldMode:
                reclassVal = self.scBurnVal
            else:
                if not reclassField:
                    self.errorDialog(self.tr("Empty field"))
                    continue
                reclassVal = self.model
                if not self.model.items:
                    self.errorDialog(self.tr("Empty model"))
                    continue
            dlgItem = ScenarioDialogItem(name,base,layer,reclassMode=burnFieldMode,
                reclassField=reclassField,reclassVal=reclassVal)
            return dlgItem
        return None

    def updateUi(self,dlgItem):
        self.scBase.addItems(self.scenarioList)
        if dlgItem:
            self.scName.setText(dlgItem.dict[ScenarioDialogItem.NAME])
            self.scBase.setText(dlgItem.dict[ScenarioDialogItem.BASE])
            self.scLayer.setLayer(dlgItem.dict[ScenarioDialogItem.LAYER])
            reclassMode = dlgItem.dict[ScenarioDialogItem.RECLASS_MODE]
            self.switchBurnMode(reclassMode)
            if reclassMode:
                self.scField.setField(dlgItem.dict[ScenarioDialogItem.RECLASS_FIELD])
                self.model = dlgItem.model
            else:
                self.scBurnVal.setValue(dlgItem.dict[ScenarioDialogItem.RECLASS_VAL])
                

class ScenarioLanduseDialog(QtWidgets.QDialog, SC_LANDUSE_DIALOG):
    def __init__(self, parent, dlgItem, feedback=None):
        """Constructor."""
        super(ScenarioLanduseDialog, self).__init__(parent)
        self.setupUi(self)
        # self.connectComponents()
        self.updateUi(dlgItem)
        
    # def connectComponents(self):
        # self.layerComboDlg = qgsUtils.LayerComboDialog(self,
            # self.scLayerCombo,self.scLayer)
                
    def updateUi(self,dlgItem):
        if dlgItem:
            self.scName.setText(dlgItem.getName())
            self.scLayer.setFilePath(dlgItem.getLayer())
        
    def errorDialog(self,msg):
        feedbacks.launchDialog(None,self.tr('Wrong parameter value'),msg)
        
    def showDialog(self):
        while self.exec_():
            name = self.scName.text()
            if not name:
                self.errorDialog(self.tr("Empty name"))
                continue
            layer = self.scLayer.filePath()
            if not layer:
                self.errorDialog(self.tr("Empty layer"))
                continue
            dlgItem = ScenarioDialogItem(name,None,layer)
            return dlgItem
        return None
                
                
                
                