# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ErcTvbPluginDialog
                                 A QGIS plugin
 ERC-TVB integrates ecological continuities in Avoid, Minimize, Mitigate sequence
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-08-25
        git sha              : $Format:%H$
        copyright            : (C) 2021 by INRAE
        email                : mathieu.chailloux@inrae.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from ..qgis_lib_mc import abstract_model

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'species_dialog.ui'))
    
class SpeciesItem(abstract_model.DictItem):

    ID = 'ID'
    FULL_NAME = 'FULL_NAME'
    MAX_DISP = 'MAX_DISP'
    MIN_AREA = 'MIN_AREA'
    LANDUSE = 'LANDUSE'
    EXTENT_MODE = 'EXTENT_MODE'
    EXTENT_VAL = 'EXTENT_VAL'
    FIELDS = [ ID, FULL_NAME, MAX_DISP, MIN_AREA, LANDUSE, EXTENT_MODE, EXTENT_VAL ]
    DISPLAY_FIELDS = [ ID, FULL_NAME ]
    
    @classmethod
    def fromValues(cls,name,full_name,max_disp,disp_unit,min_patch,
                 patch_unit,landuse,extent_mode,extent_val,
                 feedback=None):
        dict = { cls.ID : name,
                 cls.FULL_NAME : full_name,
                 cls.MAX_DISP : max_disp,
                 cls.MIN_AREA : min_patch,
                 cls.LANDUSE : landuse,
                 cls.EXTENT_MODE : extent_mode,
                 cls.EXTENT_VAL : extent_val }
        return cls(dict,cls.FIELDS,feedback=feedback,
            display_fields=cls.DISPLAY_FIELDS)
    # def __init__(self,dict=dict,feedback=None):
        # super().__init__(dict=dict,feedback=feedback)
        
    def getName(self):
        return self.dict[self.ID]
                

class SpeciesDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent, dlg_item, landuseModel=None,feedback=None):
        """Constructor."""
        super(SpeciesDialog, self).__init__(parent)
        self.feedback=feedback
        self.landuseModel = landuseModel
        self.setupUi(self)
        self.updateUi(dlg_item)
        self.connectComponents()
        
    def connectComponents(self):
        # super().connectComponents()
        self.speciesBufferMode.clicked.connect(self.switchBufferMode)
        self.speciesLayerMode.clicked.connect(self.switchLayerMode)
        self.speciesLanduse.setModel(self.landuseModel)
        self.feedback.pushInfo("LANDUSE MODEL NB ITEMS " + str(len(self.landuseModel.items)))
        # assert(False)
        self.landuseModel.layoutChanged.emit()
        
    def switchMode(self,buffer_mode):
        self.speciesBufferMode.setChecked(buffer_mode)
        self.speciesLayerMode.setChecked(not buffer_mode)
        self.speciesExtentBuffer.setEnabled(buffer_mode)
        self.speciesExtentLayer.setEnabled(not buffer_mode)
    def switchBufferMode(self):
        self.switchMode(True)
    def switchLayerMode(self):
        self.switchMode(False)
        
    def showDialog(self):
        while self.exec_():
            name = self.speciesID.text()
            full_name = self.speciesFullName.text()
            max_disp = self.speciesMaxDisp.value()
            disp_unit = self.speciesDispUnit.currentIndex()
            min_patch = self.speciesMinPatch.value()
            patch_unit = self.speciesPatchUnit.currentIndex()
            # landuse = self.speciesLanduse.currentLayer()
            landuse = self.speciesLanduse.currentIndex()
            # group = self.speciesGroup.currentIndex()
            buffer_mode = self.speciesBufferMode.isChecked()
            layer_mode = self.speciesLayerMode.isChecked()
            extent_mode = buffer_mode
            buffer_val = self.speciesExtentBuffer.value()
            buffer_layer = self.speciesExtentLayer.filePath()
            extent_val = buffer_val if buffer_mode else buffer_layer
            item = SpeciesItem.fromValues(name,full_name,max_disp,disp_unit,
                min_patch,patch_unit,landuse,extent_mode,extent_val,
                feedback=self.feedback)
            return item
        return None
        
    def updateUi(self,dlg_item):
        if dlg_item:
            self.speciesID.setText(dlg_item.dict[SpeciesItem.ID])
            self.speciesFullName.setText(dlg_item.dict[SpeciesItem.FULL_NAME])
            self.speciesMaxDisp.setValue(dlg_item.dict[SpeciesItem.MAX_DISP])
            self.speciesDispUnit.setCurrentIndex(0)
            self.speciesLanduse.setCurrentIndex(dlg_item.dict[SpeciesItem.LANDUSE])
            # self.speciesGroup.setcurrenntIndex(dlg_item.dict[SpeciesItem.GROUP])
            extent_mode = dlg_item.dict[SpeciesItem.EXTENT_MODE]
            extent_val = dlg_item.dict[SpeciesItem.EXTENT_VAL]
            self.switchMode(extent_mode)
            if extent_mode:
                self.speciesExtentBuffer.setValue(extent_val)
            else:
                self.speciesExtentLayer.setFilePath(extent_val)
            