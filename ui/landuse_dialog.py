# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ErcTvbPluginDialog
                                 A QGIS plugin
 ERC-TVB integrates ecological continuities in Avoid, Minimize, Mitigate sequence
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-08-25
        git sha              : $Format:%H$
        copyright            : (C) 2021 by INRAE
        email                : mathieu.chailloux@inrae.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic, QtWidgets
from qgis.PyQt.QtCore import Qt

from ..qgis_lib_mc import qgsTreatments, abstract_model

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'landuse_dialog.ui'))
        
class LanduseDialogItem(abstract_model.DictItem):

    NAME = 'NAME'
    ITEM_FIELDS = [ NAME ]
    
    def __init__(self, name, parent=None):
        dict = { self.NAME : name }
        super().__init__(dict, self.ITEM_FIELDS)
        
    def getName(self):
        return self.dict[self.NAME]
        
class LanduseDialogModel(abstract_model.DictModel):

    NAME = 'NAME'
    LIST = 'LIST'
    ITEM_FIELDS = [ NAME ]
    
    def __init__(self, name, string_list):
        super().__init__(dict, LanduseStringItem.ITEM_FIELDS)
        self.setItemsFromList(string_list)
        
    def setItemsFromList(self,string_list):
        self.items = []
        for str in string_list:
            string_item = LanduseStringItem(str)
            self.addItem(string_item)
        
    def getName(self):
        return self.dict[self.NAME]
        

class LanduseDialog(QtWidgets.QDialog, FORM_CLASS, abstract_model.AbstractConnector):
    def __init__(self, pluginModel, name = "", string_list = []):
        """Constructor."""
        super(LanduseDialog, self).__init__(self)
        self.feedback=parent.feedback
        model = LanduseDialogModel(name,string_list)
        super(abstract_model.AbstractConnector, self).__init__(model,self.landuseDialogView)
        self.pluginModel = pluginModel
        self.setupUi(self)

    def connectComponents(self):
        super(abstract_model.AbstractConnector, self).connectComponents()
        self.landuseDialogReload.clicked.connect(self.reloadNames)
        self.landuseDialogUp.clicked.connect(self.upgradeItem)
        self.landuseDialogDown.clicked.connect(self.downgradeItem)
        
    def reloadNames(self):
        self.model.setItemsFromList(self.pluginModel.importModel.getImportNames())

    def updateUi(self):
        self.landuseDialogName.setText(self.model.getName())
        self.model.layoutChanged.emit()
        
    def showDialog(self):
        self.feedback.pushDebugInfo("showDialog")
        while self.exec_():
            name = self.landuseDialogName.text()
            imports = [ i.getName() for i in self.items ]
            return (name, imports)
        return None
            
            
