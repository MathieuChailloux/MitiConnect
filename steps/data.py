# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ErcTvbPluginDialog
                                 A QGIS plugin
 ERC-TVB integrates ecological continuities in Avoid, Minimize, Mitigate sequence
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-08-25
        git sha              : $Format:%H$
        copyright            : (C) 2021 by INRAE
        email                : mathieu.chailloux@inrae.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic, QtWidgets
from qgis.PyQt.QtCore import Qt

from ..qgis_lib_mc.utils import CustomException
from ..ui.vector_data_dialog import VectorDlgItem, VectorDataDialog
from ..ui.raster_data_dialog import RasterDlgItem, RasterDataDialog
from ..ui.landuse_dialog import LanduseDialog
from ..qgis_lib_mc.abstract_model import (DictItem, DictModel,
    AbstractConnector, TableToDialogConnector)


class ImportItem(DictItem):
            
    INPUT = 'INPUT'
    MODE = 'MODE'
    VALUE = 'VALUE'
    STATUS = 'STATUS'
    FIELDS = [ INPUT, MODE, VALUE, STATUS ]
    
    INPUT_IDX = 0
    MODE_IDX = 1
    VALUE_IDX = 2
    STATUS_IDX = 3

    def __init__(self, dlg_item, parent=None, feedback=None):
        self.updateFromDlgItem(dlg_item)
        super().__init__(self.dict,feedback=feedback)
        
    def updateFromDlgItem(self,dlg_item):
        self.is_vector = type(dlg_item) is VectorDlgItem
        if self.is_vector:
            if dlg_item.getBurnMode():
                val = dlg_item.getBurnField()
            else:
                val = dlg_item.getBurnVal()
        else:
            val = None
        self.dict = { self.INPUT : dlg_item.dict[self.INPUT],
            self.MODE : self.is_vector,
            self.VALUE : val,
            self.STATUS : False }
        self.computed = False
        self.dlg_item = dlg_item
        self.name = self.getBaseName()
        
    def getBaseName(self):
        layer_path = self.dict[self.INPUT]
        if not layer_path:
            raise utils.CustomException("No layer specified for vector import")
        res = os.path.basename(layer_path)
        # if self.is_vector and self.dlg_item.getBurnMode():
            # res += "_" + str(self.dlg_item.getBurnField())
        return res
        
    # def getNField(self,n):
        # if n == self.INPUT_IDX:
            # return self.item[self.INPUT]
        # elif n == self.MODE_IDX:
            # return 'V' if self.is_vector else 'R'
        # elif n == self.VALUE_IDX:
            # return self.item.burn_val
        # elif n == self.STATUS_IDX
            # return self.computed

class ImportModel(DictModel):

    def __init__(self, parentModel):
        # self.item_fields = [ self.INPUT, self.EXPRESSION, self.BURN_MODE, self.BURN_VAL,
            # self.ALL_TOUCH, self.BUFFER_MODE, self.BUFFER_EXPR ]
        super().__init__(self,ImportItem.FIELDS,feedback=parentModel.feedback)
        self.parentModel = parentModel
        
    def addItem(self,item):
        super().addItem(item)
        self.parentModel.addImport(item)
        
    def applyItemWithContext(self,item,context,feedback):
        input_path = itme.getLayerPath()
        input = qgsUtils.loadLayer(input_path)
        input_extent = input.extent()
        crs = input.crs().authid()
        resolution = 10
        out_type = Qgis.Int16
        out_nodata = -1
        out_path = self.getItemOutPath(item)
        if item.is_vector:
            selected = QgsProcessingUtils.generateTempFilename('selection.gpkg')
            all_touch = item.getAllTouch()
            if item.getBurnMode():
                burn_field = item.getBurnField()
                BioDispersal_algs.applyRasterizationFixAllTouch(
                    selected,out_path,input_extent,resolution,
                    field=burn_field,out_type=out_type,all_touch=all_touch,
                    context=context,feedback=feedback)
            else:
                burn_val = item.getBurnVal()
                BioDispersal_algs.applyRasterizationFixAllTouch(
                    selected,out_path,input_extent,resolution,
                    burn_val=burn_val,out_type=out_type,all_touch=all_touch,
                    context=context,feedback=feedback)
        else:
            reclassified = QgsProcessingUtils.generateTempFilename('reclassified.tif')
            qgsTreatments.applyReclassifyByTable(input,matrix,reclassified,
                out_type = out_type,boundaries_mode=2,nodata_missing=True,
                context=context,feedback=feedback)
            qgsTreatments.applyWarpReproject(reclassified,out_path,dst_crs=crs,
                extent=input_extent,extent_crs=crs,resolution=resolution,
                out_type=out_type,overwrite=True,context=context,feedback=feedback)
                
    # Returns absolute path of 'item' output layer
    def getItemOutPath(self,item):
        out_bname = item.getName() + ".tif"
        out_dir = self.parentModel.getImportsDir()
        return os.path.join(out_dir,out_bname)
    def getItemFromName(self,name):
        for i in self.items:
            if i.name == name:
                return i
        return None
        
    def getImportNames(self):
        return [i.getBaseName() for i in self.items]
        
    def flags(self, index):
        return Qt.ItemIsSelectable | Qt.ItemIsEnabled

class ImportConnector(TableToDialogConnector):

    def __init__(self,dlg,model):
        self.dlg = dlg
        self.feedback = dlg.feedback
        self.onlySelection = False
        # self.importModel = ImportModel(self)
        super().__init__(model,self.dlg.importView,
                         None,self.dlg.importDelete)

    def connectComponents(self):
        super().connectComponents()
        # self.dlg.importView.doubleClicked.connect(self.openImport)
        self.dlg.importVector.clicked.connect(self.openImportVectorNew)
        self.dlg.importRaster.clicked.connect(self.openImportRasterNew)
    
    # def openImport(self,index):
        # row = index.row()
        # item = self.model.getNItem(row)
        # self.feedback.pushDebugInfo("openImport item = " +str(item))
        # if item.is_vector:
            # dlg_item = self.openImportVector(item.dlg_item)
        # else:
            # dlg_item = self.openImportRaster(item.dlg_item)
        # if dlg_item:
            # item.updateFromDlgItem(dlg_item)
            # self.model.layoutChanged.emit()
            
            
    def openDialog(self,item):
        if item.is_vector:
            item_dlg = VectorDataDialog(item.dlg_item,self.dlg)
        else:
            item_dlg = RasterDataDialog(item.dlg_item,self.dlg,
                class_model=self.model.parentModel.frictionModel)
        return item_dlg
        # dlg_item = item_dlg.showDialog()
        # return dlg_item
        
    def openImportVectorNew(self,checked):
        item_dlg = VectorDataDialog(None,self.dlg)
        dlg_item = item_dlg.showDialog()
        self.addDlgItem(dlg_item)
        
    # def openImportVector(self,dlg_item):
        # vector_data_dlg = VectorDataDialog(dlg_item,self.dlg)
        # dlg_item = vector_data_dlg.showDialog()
        # return dlg_item
        
    def openImportRasterNew(self,checked):
        item_dlg = RasterDataDialog(None,self.dlg,
            class_model=self.model.parentModel.frictionModel)
        dlg_item = item_dlg.showDialog()
        self.addDlgItem(dlg_item)
            
    # def openImportRaster(self,dlg_item):
        # raster_data_dlg = RasterDataDialog(dlg_item,self.dlg,class_model=self.model.frictionModel)
        # dlg_item = raster_data_dlg.showDialog()
        # return dlg_item
        
    def addDlgItem(self,dlg_item):
        if dlg_item:
            item = ImportItem(dlg_item)
            self.model.addItem(item)
            self.model.layoutChanged.emit()
        
    def updateItem(self,item,dlg_item): 
        item.updateFromDlgItem(dlg_item)
        

class LanduseItem(DictItem):

    NAME = 'NAME'
    IMPORTS = 'IMPORTS'
    FIELDS = [ NAME, IMPORTS ]
    
    def __init__(self, name, imports, parent=None, feedback=None):
        dict = { self.NAME : name, self.IMPORTS : imports }
        super().__init__(dict, self.FIELDS, feedback=feedback)
        
    def getName(self):
        return self.dict[self.NAME]
    def getImports(self):
        return self.dict[self.IMPORTS]
    def setName(self,name):
        self.dict[self.NAME] = name
    def setImports(self,imports):
        self.dict[self.IMPORTS] = imports
        
    def applyItemWithContext(self,context,feedback,indexes=None):
        names = [i.getName() for n in self.items]
        import_items = [self.pluginModel.importModel.getItemFromName(n) for n in names]
        paths = [i.getItemOutPath() for i in import_items]
        # out_path = 
        qgsTreatments.applyMergeRaster(paths,out_path,
            out_type=Qgis.Int16,context=context,feedback=feedback)
        
class LanduseModel(DictModel):

    def __init__(self, pluginModel):
        self.pluginModel = pluginModel
        self.currImportNames = []
        super().__init__(self,LanduseItem.FIELDS,feedback=pluginModel.feedback)
                    
    def updateImportName(self):
        pass
        
    def getOutPathOfItem(self,item):
        pass
        
    def getImportNames(self,item):  
        return 
        
    def applyItemWithContext(self,context,feedback,indexes=None):
        names = [i.getName() for n in self.items]
        import_items = [self.pluginModel.importModel.getItemFromName(n) for n in names]
        paths = [i.getItemOutPath() for i in import_items]
        # out_path = 
        qgsTreatments.applyMergeRaster(paths,out_path,
            out_type=Qgis.Int16,context=context,feedback=feedback)
        

class LanduseConnector(AbstractConnector):

    def __init__(self,dlg,landuseModel):
        self.dlg = dlg
        self.feedback = landuseModel.feedback
        super().__init__(landuseModel,self.dlg.landuseView,
                        None,self.dlg.landuseRemove)
    
    def connectComponents(self):
        super().connectComponents()
        self.dlg.landuseView.doubleClicked.connect(self.openLanduse)
        self.dlg.landuseNew.clicked.connect(self.openLanduseNew)
    
    def openLanduseNew(self,checked):
        self.feedback.pushDebugInfo("checked = " + str(checked))
        import_names = self.model.pluginModel.importModel.getImportNames()
        self.feedback.pushDebugInfo("import names = " + str(import_names))
        landuse_dlg = LanduseDialog(self.dlg,self.model.pluginModel,
            string_list=import_names)
        res = landuse_dlg.showDialog()
        if not res:
            return
        (name, imports) = res
        if name:
            item = LanduseItem(name,imports,feedback=self.feedback)
            self.model.addItem(item)
            self.model.layoutChanged.emit()
        else:
            self.feedback.user_error("No name given to landuse layers ranking")
        
    def openLanduse(self,index):
        row = index.row()
        item = self.model.getNItem(row)
        self.feedback.pushDebugInfo("openImport item = " +str(item))
        landuse_dlg = LanduseDialog(self.dlg,self.model.pluginModel,
            name=item.getName(),string_list=item.getImports())
        res = landuse_dlg.showDialog()
        if not res:
            return
        (name, imports) = res
        self.feedback.pushDebugInfo("name = " +str(name))
        self.feedback.pushDebugInfo("imports = " +str(imports))
        if name:
            item.setName(name)
            item.setImports(imports)
            self.model.layoutChanged.emit()
        else:
            self.feedback.user_error("No name given to landuse layers ranking")
